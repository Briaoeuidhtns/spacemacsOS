* EXWM contribution layer for Spacemacs

** Table of Contents                                                  :TOC@4:
- [[#exwm-contribution-layer-for-spacemacs][EXWM contribution layer for Spacemacs]]
  - [[#description][Description]]
  - [[#install][Install]]
    - [[#note-about-display-managers][Note about Display Managers]]
    - [[#not-having-display-managers][Not having Display Managers]]
    - [[#osx][OSX]]
  - [[#key-bindings][Key bindings]]
- [[#window-behaviour-regarding-char-and-line-mode][Window behaviour regarding char and line mode]]

** Description

*Fork Note:*  This layer is based on CestDiego's PR from
https://github.com/syl20bnr/spacemacs/pull/3321.

The time has arrived when one can finally use Emacs as a Window Manager, long
ago the concepts of *windows* and *frames* made so much sense when one was
working in a TTY, and basically that's all the window management you got. In
these *modern* times though, it sounds silly to have those names. But not
Anymore!

Thanks to @ch11ng and his [[https://github.com/ch11ng/exwm][EXWM]] project we can now use Emacs as our window
manager, and all those *windows* that didn't make sense before, now can not only
hold buffers, but X Windows, that means that you can spawn a Browser Window, or
your music player, or anything.

I urge you to read the [[https://github.com/ch11ng/exwm/wiki][EXWM Wiki]] for a more in depth explanation and if you can
contribute, please do so! The purpose of me making this layer is that I find it
awesome and having nice defaults would make more people dive into it and the
project would receive more attention and contributions which will only make it
more awesome, so if you try it and like it, share it!

This is how it looks like:

[[img/spacemacsOS.jpg]]

** Install
To use this contribution,
- place this repository in one of Spacemacs' layer directories
  (~/.emacs.d/private/local/exwm, ~/.spacemacs.d/private/exwm, or ~/.spacemacs.d/layers/exwm)
- add the layer in your =~/.spacemacs=

#+begin_src emacs-lisp
  (setq-default dotspacemacs-configuration-layers '(exwm))
#+end_src

*** Note about Display Managers

This is most common among Ubuntu and derivative users:

LightDM, GDM, and other Display managers that need a session file will need you
to copy the [[file:files/exwm.desktop][desktop file]] I bundled with this layer to
~/usr/local/xsessions/exwm.desktop~, that's what I used on my Ubuntu box, but
make sure the [[file:files/exwm-start][exwm-start script]] is in your PATH, you can put it in
~/usr/local/bin/exwm-start~ and that should be enough, next time you log out,
select the EXWM session instead of the Ubuntu one and you should be alright.

*** Not having Display Managers

If you use Arch, Gentoo, or any other Linux, most probably you'll start your
configurations via a ~.xinitrc~ file, just append ~exwm-start~ to the end of
that file and you should be fine. I do recommend to check the [[https://github.com/ch11ng/exwm/wiki][EXWM Wiki]] for more
details.

*** OSX

If you are an OSX user, please report back on whether this works with xQuartz,
always back up your data before attempting to try stuff like this.

** Key bindings

As other window managers the ~s~ or *Super* key (Windows Key) is the one that
is the prefix to every action. We'll use a lot of ~s~.  These commands work in
both normal state and insert state.

| Key Binding           | Description                                                           |
|-----------------------+-----------------------------------------------------------------------|
| ~i~                   | Switch from normal state to insert state, (similar to EXWM char mode) |
| ~s-SPC~               | Spacemacs Leader Key (in insert state)                                |
| ~s-[1 2 3 ... 8 9 0]~ | Switch to workspace [0 ... 9]                                         |
| ~s-TAB~               | Switch to last workspace                                              |
| ~s-w~                 | Workspace Switch Menu (kinda like micro-state)                        |
| ~s-ESC~               | Switch to normal state                                                |
| ~s-r~                 | App Launcher                                                          |
| ~s-pause~             | Lock Screen                                                           |
| ~s-u,U~               | Undo, Redo window configurations                                      |
| ~s-b~                 | Select and switch to buffer                                           |
| ~s-q~                 | Close current buffer                                                  |
| ~s-h,j,k,l~           | Switch to left,lower,upper,right window                               |
| ~s-H,J,K,L~           | Move window to far left,down,lower,upper,right                        |
| ~M-s-h,j,k,l~         | Resizing (try them, it's too hard to explain)                         |

Since running programs is one of the more common task, some explicit support is
provided for that via the leader key ~SPC &~.

For these commands as well as for ~s-r~ the working directory is set to the
value of =user-home-directory= for the started process.

| Key Binding | Description                                                               |
|-------------+---------------------------------------------------------------------------|
| ~SPC & s~   | Ask for program to run in separate window below current window            |
| ~SPC & v~   | Ask for program to run in separate window to the right of current window. |

* Window behaviour regarding char and line mode

  In stock Emacs, EXWM uses char mode and line mode to distinguish between using
  the keyboard to control an application vs. using the keyboard to control the
  application's *buffer*.  Since Spacemacs pursues a different concept regarding
  keybindings SpacemacsOS handles this differently:

  - EXWM buffers are used in line mode, all local key bindings are removed per
    default.  This corresponds to Spacemacs insert state.
  - The command `exwm/enter-normal-state` (default binding ~s-ESC~) enters
    EXWM's input passthrough mode, meaning that *all* key-presses are sent to
    Spacemacs, and not the application.  This corresponds to Spacemacs normal state.
